{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/timcher/Documents/GitHub/goit-react-hw-06-phonebook/src/Component/PhoneBook/PhoneBook.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { alertClose } from \"../../redux/action/alertAction\";\nimport { setContactLocalStorage } from \"../../redux/action/phoneBookAction\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Form from \"../Form/Form\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport styles from \"./PhoneBook.module.css\";\nimport \"./PhoneBook.css\";\n\nconst PhoneBook = () => {\n  _s();\n\n  const contacts = useSelector(state => state.items.contacts);\n  const filter = useSelector(state => state.items.filter);\n  const alert = useSelector(state => state.items.isAlert);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const persistedTasks = localStorage.getItem(\"items\");\n    const parseContact = JSON.parse(persistedTasks);\n\n    if (persistedTasks) {\n      dispatch(setContactLocalStorage(parseContact));\n    }\n  }, [dispatch]);\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const filterContacts = () => {\n    const filterArr = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n\n    if (filterArr.length > 1) {\n      return filterArr;\n    } else {\n      return contacts;\n    }\n  };\n\n  const closeAlert = () => {\n    dispatch(alertClose());\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: true,\n      appear: true,\n      timeout: 500,\n      classNames: \"logo\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"PhoneBook\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: true,\n      appear: true,\n      timeout: 1000,\n      classNames: \"form\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: true,\n      timeout: 250,\n      classNames: \"contactTitle\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"title\",\n        children: \"Find contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PhoneBook, \"wNDk0aUTJ9jJ3HeUdupiM1u5ZN0=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = PhoneBook;\nexport default PhoneBook; // class PhoneBook extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     isError: false,\n//     alert: false,\n//     // number: '',\n//   };\n//   componentDidMount() {\n//     const persistedTasks = localStorage.getItem(\"contacts\");\n//     if (persistedTasks) {\n//       this.setState({\n//         contacts: JSON.parse(persistedTasks),\n//       });\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n//   addContact = (contact) => {\n//     const arr = this.state.contacts;\n//     const result = arr.some((item) => item.name.includes(contact.name));\n//     result\n//       ? this.setState({ alert: result })\n//       : this.setState((prev) => ({\n//           contacts: [...prev.contacts, { ...contact, id: uuidv4() }],\n//         }));\n//   };\n//   deleteContact = (id) => {\n//     this.setState({\n//       contacts: this.state.contacts.filter((contact) => contact.id !== id),\n//     });\n//   };\n//   filterContact = () => {\n//     return this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\n//     );\n//   };\n//   onHandleChange = (e) => {\n//     const { name, value } = e.target;\n//     this.setState({ [name]: value });\n//   };\n//   onSetError = () => {\n//     this.setState((prev) => ({ isError: !prev.isError }));\n//   };\n//   closeAlert = () => {\n//     this.setState({ alert: false });\n//   };\n//   render() {\n//     const { isError } = this.state;\n//     return (\n//       <>\n//         <TransitionGroup className=\"alertBox\" component=\"div\">\n//           {this.state.alert ? (\n//             <CSSTransition\n//               classNames=\"alert__Box\"\n//               mountOnEnter\n//               unmountOnExit\n//               timeout={800}\n//             >\n//               <div className=\"alert__Box\">\n//                 <h2>{`A contact with the same name already exists!`}</h2>\n//                 <button onClick={this.closeAlert} className=\"alertButton\">\n//                   ok\n//                 </button>\n//               </div>\n//             </CSSTransition>\n//           ) : null}\n//         </TransitionGroup>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={500}\n//           classNames=\"logo\"\n//           unmountOnExit\n//         >\n//           <h1 className=\"title\">PhoneBook</h1>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={1000}\n//           classNames=\"form\"\n//           unmountOnExit\n//         >\n//           <Form\n//             addContact={this.addContact}\n//             isError={this.state.isError}\n//             onSetError={this.onSetError}\n//           />\n//         </CSSTransition>\n//         <CSSTransition\n//           in={this.state.contacts.length > 1}\n//           timeout={250}\n//           classNames=\"contactTitle\"\n//           unmountOnExit\n//         >\n//           <h2 className=\"title\">Find contacts</h2>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={isError}\n//           classNames=\"notFound\"\n//           timeout={500}\n//           unmountOnExit\n//         >\n//           <h2 className={styles.contactListErr}>\n//             Name or Contact is not found!!!\n//           </h2>\n//         </CSSTransition>\n//         <Filter\n//           filter={this.state.filter}\n//           onHandleChange={this.onHandleChange}\n//           contacts={this.state.contacts}\n//         />\n//         {/* <CSSTransition> */}\n//         <ContactList\n//           contacts={\n//             this.state.filter ? this.filterContact() : this.state.contacts\n//           }\n//           deleteContact={this.deleteContact}\n//         />\n//         {/* </CSSTransition> */}\n//       </>\n//     );\n//   }\n// }\n// export default PhoneBook;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhoneBook\");","map":{"version":3,"sources":["/Users/timcher/Documents/GitHub/goit-react-hw-06-phonebook/src/Component/PhoneBook/PhoneBook.js"],"names":["React","useEffect","CSSTransition","TransitionGroup","alertClose","setContactLocalStorage","useDispatch","useSelector","v4","uuidv4","Form","ContactList","Filter","styles","PhoneBook","contacts","state","items","filter","alert","isAlert","dispatch","persistedTasks","localStorage","getItem","parseContact","JSON","parse","setItem","stringify","filterContacts","filterArr","contact","name","toLowerCase","includes","length","closeAlert"],"mappings":"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":["import React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { alertClose } from \"../../redux/action/alertAction\";\nimport { setContactLocalStorage } from \"../../redux/action/phoneBookAction\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Form from \"../Form/Form\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport styles from \"./PhoneBook.module.css\";\nimport \"./PhoneBook.css\";\n\nconst PhoneBook = () => {\n  const contacts = useSelector((state) => state.items.contacts);\n  const filter = useSelector((state) => state.items.filter);\n  const alert = useSelector((state) => state.items.isAlert);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const persistedTasks = localStorage.getItem(\"items\");\n    const parseContact = JSON.parse(persistedTasks);\n    if (persistedTasks) {\n      dispatch(setContactLocalStorage(parseContact));\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const filterContacts = () => {\n    const filterArr = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    if (filterArr.length > 1) {\n      return filterArr;\n    } else {\n      return contacts;\n    }\n  };\n\n  const closeAlert = () => {\n    dispatch(alertClose());\n  };\n\n  return (\n    <>\n      {/* <TransitionGroup className=\"alertBox\" component=\"div\">\n        {alert ? (\n          <CSSTransition\n            classNames=\"alert__Box\"\n            mountOnEnter\n            unmountOnExit\n            timeout={800}\n          >\n            <div className=\"alert__Box\">\n              <h2>{`A contact with the same name already exists!`}</h2>\n              <button onClick={closeAlert} className=\"alertButton\">\n                ok\n              </button>\n            </div>\n          </CSSTransition>\n        ) : null}\n      </TransitionGroup> */}\n\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={500}\n        classNames=\"logo\"\n        unmountOnExit\n      >\n        <h1 className=\"title\">PhoneBook</h1>\n      </CSSTransition>\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={1000}\n        classNames=\"form\"\n        unmountOnExit\n      >\n        <Form />\n      </CSSTransition>\n      <CSSTransition\n        in={true}\n        timeout={250}\n        classNames=\"contactTitle\"\n        unmountOnExit\n      >\n        <h2 className=\"title\">Find contacts</h2>\n      </CSSTransition>\n      {/* <ContactList contacts={filter ? filterContacts : contacts} /> */}\n    </>\n  );\n};\n\nexport default PhoneBook;\n\n// class PhoneBook extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     isError: false,\n//     alert: false,\n//     // number: '',\n//   };\n\n//   componentDidMount() {\n//     const persistedTasks = localStorage.getItem(\"contacts\");\n//     if (persistedTasks) {\n//       this.setState({\n//         contacts: JSON.parse(persistedTasks),\n//       });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = (contact) => {\n//     const arr = this.state.contacts;\n//     const result = arr.some((item) => item.name.includes(contact.name));\n//     result\n//       ? this.setState({ alert: result })\n//       : this.setState((prev) => ({\n//           contacts: [...prev.contacts, { ...contact, id: uuidv4() }],\n//         }));\n//   };\n\n//   deleteContact = (id) => {\n//     this.setState({\n//       contacts: this.state.contacts.filter((contact) => contact.id !== id),\n//     });\n//   };\n\n//   filterContact = () => {\n//     return this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\n//     );\n//   };\n\n//   onHandleChange = (e) => {\n//     const { name, value } = e.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   onSetError = () => {\n//     this.setState((prev) => ({ isError: !prev.isError }));\n//   };\n\n//   closeAlert = () => {\n//     this.setState({ alert: false });\n//   };\n\n//   render() {\n//     const { isError } = this.state;\n//     return (\n//       <>\n//         <TransitionGroup className=\"alertBox\" component=\"div\">\n//           {this.state.alert ? (\n//             <CSSTransition\n//               classNames=\"alert__Box\"\n//               mountOnEnter\n//               unmountOnExit\n//               timeout={800}\n//             >\n//               <div className=\"alert__Box\">\n//                 <h2>{`A contact with the same name already exists!`}</h2>\n//                 <button onClick={this.closeAlert} className=\"alertButton\">\n//                   ok\n//                 </button>\n//               </div>\n//             </CSSTransition>\n//           ) : null}\n//         </TransitionGroup>\n\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={500}\n//           classNames=\"logo\"\n//           unmountOnExit\n//         >\n//           <h1 className=\"title\">PhoneBook</h1>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={1000}\n//           classNames=\"form\"\n//           unmountOnExit\n//         >\n//           <Form\n//             addContact={this.addContact}\n//             isError={this.state.isError}\n//             onSetError={this.onSetError}\n//           />\n//         </CSSTransition>\n//         <CSSTransition\n//           in={this.state.contacts.length > 1}\n//           timeout={250}\n//           classNames=\"contactTitle\"\n//           unmountOnExit\n//         >\n//           <h2 className=\"title\">Find contacts</h2>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={isError}\n//           classNames=\"notFound\"\n//           timeout={500}\n//           unmountOnExit\n//         >\n//           <h2 className={styles.contactListErr}>\n//             Name or Contact is not found!!!\n//           </h2>\n//         </CSSTransition>\n//         <Filter\n//           filter={this.state.filter}\n//           onHandleChange={this.onHandleChange}\n//           contacts={this.state.contacts}\n//         />\n//         {/* <CSSTransition> */}\n//         <ContactList\n//           contacts={\n//             this.state.filter ? this.filterContact() : this.state.contacts\n//           }\n//           deleteContact={this.deleteContact}\n//         />\n//         {/* </CSSTransition> */}\n//       </>\n//     );\n//   }\n// }\n\n// export default PhoneBook;\n"]},"metadata":{},"sourceType":"module"}