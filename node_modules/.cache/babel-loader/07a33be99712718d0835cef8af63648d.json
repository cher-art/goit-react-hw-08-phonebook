{"ast":null,"code":"import axios from \"axios\";\nimport { setError, resetError } from \"../action/errorAction\";\nimport { loaderOn, loaderOff } from \"../action/loaderAction\";\nimport { setContactLocalStorage, addConct, deleteContact, setContact } from \"../action/contactAction\";\nimport { resetToken, setToken } from \"../action/tokenAction\"; // const options = {\n//   header: {\n//     \"Content-type\": \"application/json\",\n//   },\n// };\n\nexport const getContactsOperation = () => async dispatch => {\n  try {\n    dispatch(loaderOn());\n    const result = await axios.get(`https://goit-phonebook-api.herokuapp.com/contacts`);\n    console.log(result);\n    dispatch(setToken(result.data.token));\n    dispatch(setContact(result.data));\n  } catch (error) {\n    dispatch(setError(\"Оууууу, щось сталось =D\"));\n  } finally {\n    dispatch(loaderOff());\n  }\n};\nexport const postContactsOperations = contact => async dispatch => {\n  try {\n    dispatch(loaderOn());\n    await axios.post(`https://goit-phonebook-api.herokuapp.com/contacts`, contact);\n  } catch (error) {\n    dispatch(setError(\"Оууууу, щось сталось =D\"));\n  } finally {\n    dispatch(loaderOff());\n  }\n};\nexport const deleteContactOperation = contactId => async dispatch => {\n  try {\n    await axios.delete(`https://goit-phonebook-api.herokuapp.com/contacts/${contactId}`);\n    dispatch(deleteContact(contactId));\n  } catch (error) {\n    dispatch(setError(\"Оууууу, щось сталось =D\"));\n  } finally {\n    dispatch(loaderOff());\n  }\n};","map":{"version":3,"sources":["/Users/timcher/Documents/GitHub/goit-react-hw-08-phonebook/src/redux/operations/taskOperations.js"],"names":["axios","setError","resetError","loaderOn","loaderOff","setContactLocalStorage","addConct","deleteContact","setContact","resetToken","setToken","getContactsOperation","dispatch","result","get","console","log","data","token","error","postContactsOperations","contact","post","deleteContactOperation","contactId","delete"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,EAAmBC,UAAnB,QAAqC,uBAArC;AACA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,wBAApC;AACA,SACEC,sBADF,EAEEC,QAFF,EAGEC,aAHF,EAIEC,UAJF,QAKO,yBALP;AAMA,SAASC,UAAT,EAAqBC,QAArB,QAAqC,uBAArC,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,oBAAoB,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC5D,MAAI;AACFA,IAAAA,QAAQ,CAACT,QAAQ,EAAT,CAAR;AACA,UAAMU,MAAM,GAAG,MAAMb,KAAK,CAACc,GAAN,CAClB,mDADkB,CAArB;AAGAC,IAAAA,OAAO,CAACC,GAAR,CAAYH,MAAZ;AACAD,IAAAA,QAAQ,CAACF,QAAQ,CAACG,MAAM,CAACI,IAAP,CAAYC,KAAb,CAAT,CAAR;AACAN,IAAAA,QAAQ,CAACJ,UAAU,CAACK,MAAM,CAACI,IAAR,CAAX,CAAR;AACD,GARD,CAQE,OAAOE,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAACX,QAAQ,CAAC,yBAAD,CAAT,CAAR;AACD,GAVD,SAUU;AACRW,IAAAA,QAAQ,CAACR,SAAS,EAAV,CAAR;AACD;AACF,CAdM;AAgBP,OAAO,MAAMgB,sBAAsB,GAAIC,OAAD,IAAa,MAAOT,QAAP,IAAoB;AACrE,MAAI;AACFA,IAAAA,QAAQ,CAACT,QAAQ,EAAT,CAAR;AACA,UAAMH,KAAK,CAACsB,IAAN,CACH,mDADG,EAEJD,OAFI,CAAN;AAID,GAND,CAME,OAAOF,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAACX,QAAQ,CAAC,yBAAD,CAAT,CAAR;AACD,GARD,SAQU;AACRW,IAAAA,QAAQ,CAACR,SAAS,EAAV,CAAR;AACD;AACF,CAZM;AAcP,OAAO,MAAMmB,sBAAsB,GAAIC,SAAD,IAAe,MAAOZ,QAAP,IAAoB;AACvE,MAAI;AACF,UAAMZ,KAAK,CAACyB,MAAN,CACH,qDAAoDD,SAAU,EAD3D,CAAN;AAGAZ,IAAAA,QAAQ,CAACL,aAAa,CAACiB,SAAD,CAAd,CAAR;AACD,GALD,CAKE,OAAOL,KAAP,EAAc;AACdP,IAAAA,QAAQ,CAACX,QAAQ,CAAC,yBAAD,CAAT,CAAR;AACD,GAPD,SAOU;AACRW,IAAAA,QAAQ,CAACR,SAAS,EAAV,CAAR;AACD;AACF,CAXM","sourcesContent":["import axios from \"axios\";\nimport { setError, resetError } from \"../action/errorAction\";\nimport { loaderOn, loaderOff } from \"../action/loaderAction\";\nimport {\n  setContactLocalStorage,\n  addConct,\n  deleteContact,\n  setContact,\n} from \"../action/contactAction\";\nimport { resetToken, setToken } from \"../action/tokenAction\";\n\n// const options = {\n//   header: {\n//     \"Content-type\": \"application/json\",\n//   },\n// };\n\nexport const getContactsOperation = () => async (dispatch) => {\n  try {\n    dispatch(loaderOn());\n    const result = await axios.get(\n      `https://goit-phonebook-api.herokuapp.com/contacts`\n    );\n    console.log(result);\n    dispatch(setToken(result.data.token));\n    dispatch(setContact(result.data));\n  } catch (error) {\n    dispatch(setError(\"Оууууу, щось сталось =D\"));\n  } finally {\n    dispatch(loaderOff());\n  }\n};\n\nexport const postContactsOperations = (contact) => async (dispatch) => {\n  try {\n    dispatch(loaderOn());\n    await axios.post(\n      `https://goit-phonebook-api.herokuapp.com/contacts`,\n      contact\n    );\n  } catch (error) {\n    dispatch(setError(\"Оууууу, щось сталось =D\"));\n  } finally {\n    dispatch(loaderOff());\n  }\n};\n\nexport const deleteContactOperation = (contactId) => async (dispatch) => {\n  try {\n    await axios.delete(\n      `https://goit-phonebook-api.herokuapp.com/contacts/${contactId}`\n    );\n    dispatch(deleteContact(contactId));\n  } catch (error) {\n    dispatch(setError(\"Оууууу, щось сталось =D\"));\n  } finally {\n    dispatch(loaderOff());\n  }\n};\n"]},"metadata":{},"sourceType":"module"}