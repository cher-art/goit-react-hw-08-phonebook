{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/timcher/Documents/GitHub/goit-react-hw-08-phonebook/src/Component/PhoneBook/PhoneBook.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { alertClose } from \"../../redux/action/alertAction\";\nimport { setContactLocalStorage } from \"../../redux/action/contactAction\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContactsOperation } from \"../../redux/operations/taskOperations\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Form from \"../Form/Form\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport \"./PhoneBook.css\";\n\nconst PhoneBook = () => {\n  _s();\n\n  const contacts = useSelector(state => state.contacts);\n  const filter = useSelector(state => state.filter);\n  const alert = useSelector(state => state.isAlert);\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getContactsOperation());\n    const persistedTasks = localStorage.getItem(\"contacts\");\n    const parseContact = JSON.parse(persistedTasks);\n\n    if (persistedTasks) {\n      dispatch(setContactLocalStorage(parseContact));\n    }\n  }, [dispatch]);\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const filterContacts = () => {\n    const filterArr = contacts.filter(contact => contact.name.toLowerCase().includes(filter.toLowerCase()));\n\n    if (filterArr.length >= 1) {\n      return filterArr;\n    } else {\n      return contacts;\n    }\n  };\n\n  const closeAlert = () => {\n    dispatch(alertClose());\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phoneBook\",\n    children: [/*#__PURE__*/_jsxDEV(TransitionGroup, {\n      className: \"alertBox\",\n      component: \"div\",\n      children: alert ? /*#__PURE__*/_jsxDEV(CSSTransition, {\n        classNames: \"alert__Box\",\n        mountOnEnter: true,\n        unmountOnExit: true,\n        timeout: 800,\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"alert__Box\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: `A contact with the same name already exists!`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: closeAlert,\n            className: \"alertButton\",\n            children: \"ok\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this) : null\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: true,\n      appear: true,\n      timeout: 500,\n      classNames: \"logo\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"PhoneBook\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: true,\n      appear: true,\n      timeout: 500,\n      classNames: \"form\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(Form, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: filterContacts().length >= 1,\n      timeout: 250,\n      classNames: \"contactTitle\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"findTitle\",\n        children: \"Find contacts\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CSSTransition, {\n      in: filterContacts().length >= 1,\n      timeout: 250,\n      classNames: \"contactTitle\",\n      unmountOnExit: true,\n      children: /*#__PURE__*/_jsxDEV(Filter, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TransitionGroup, {\n      component: \"ul\",\n      className: \"list\",\n      children: filterContacts().map(contact => /*#__PURE__*/_jsxDEV(CSSTransition, {\n        classNames: \"list__item\",\n        timeout: 800,\n        children: /*#__PURE__*/_jsxDEV(ContactList, { ...contact\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n\n_s(PhoneBook, \"wNDk0aUTJ9jJ3HeUdupiM1u5ZN0=\", false, function () {\n  return [useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = PhoneBook;\nexport default PhoneBook; // class PhoneBook extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     isError: false,\n//     alert: false,\n//     // number: '',\n//   };\n//   componentDidMount() {\n//     const persistedTasks = localStorage.getItem(\"contacts\");\n//     if (persistedTasks) {\n//       this.setState({\n//         contacts: JSON.parse(persistedTasks),\n//       });\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n//   addContact = (contact) => {\n//     const arr = this.state.contacts;\n//     const result = arr.some((item) => item.name.includes(contact.name));\n//     result\n//       ? this.setState({ alert: result })\n//       : this.setState((prev) => ({\n//           contacts: [...prev.contacts, { ...contact, id: uuidv4() }],\n//         }));\n//   };\n//   deleteContact = (id) => {\n//     this.setState({\n//       contacts: this.state.contacts.filter((contact) => contact.id !== id),\n//     });\n//   };\n//   filterContact = () => {\n//     return this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\n//     );\n//   };\n//   onHandleChange = (e) => {\n//     const { name, value } = e.target;\n//     this.setState({ [name]: value });\n//   };\n//   onSetError = () => {\n//     this.setState((prev) => ({ isError: !prev.isError }));\n//   };\n//   closeAlert = () => {\n//     this.setState({ alert: false });\n//   };\n//   render() {\n//     const { isError } = this.state;\n//     return (\n//       <>\n//         <TransitionGroup className=\"alertBox\" component=\"div\">\n//           {this.state.alert ? (\n//             <CSSTransition\n//               classNames=\"alert__Box\"\n//               mountOnEnter\n//               unmountOnExit\n//               timeout={800}\n//             >\n//               <div className=\"alert__Box\">\n//                 <h2>{`A contact with the same name already exists!`}</h2>\n//                 <button onClick={this.closeAlert} className=\"alertButton\">\n//                   ok\n//                 </button>\n//               </div>\n//             </CSSTransition>\n//           ) : null}\n//         </TransitionGroup>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={500}\n//           classNames=\"logo\"\n//           unmountOnExit\n//         >\n//           <h1 className=\"title\">PhoneBook</h1>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={1000}\n//           classNames=\"form\"\n//           unmountOnExit\n//         >\n//           <Form\n//             addContact={this.addContact}\n//             isError={this.state.isError}\n//             onSetError={this.onSetError}\n//           />\n//         </CSSTransition>\n//         <CSSTransition\n//           in={this.state.contacts.length > 1}\n//           timeout={250}\n//           classNames=\"contactTitle\"\n//           unmountOnExit\n//         >\n//           <h2 className=\"title\">Find contacts</h2>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={isError}\n//           classNames=\"notFound\"\n//           timeout={500}\n//           unmountOnExit\n//         >\n//           <h2 className={styles.contactListErr}>\n//             Name or Contact is not found!!!\n//           </h2>\n//         </CSSTransition>\n//         <Filter\n//           filter={this.state.filter}\n//           onHandleChange={this.onHandleChange}\n//           contacts={this.state.contacts}\n//         />\n//         {/* <CSSTransition> */}\n//         <ContactList\n//           contacts={\n//             this.state.filter ? this.filterContact() : this.state.contacts\n//           }\n//           deleteContact={this.deleteContact}\n//         />\n//         {/* </CSSTransition> */}\n//       </>\n//     );\n//   }\n// }\n// export default PhoneBook;\n\nvar _c;\n\n$RefreshReg$(_c, \"PhoneBook\");","map":{"version":3,"sources":["/Users/timcher/Documents/GitHub/goit-react-hw-08-phonebook/src/Component/PhoneBook/PhoneBook.js"],"names":["React","useEffect","CSSTransition","TransitionGroup","alertClose","setContactLocalStorage","useDispatch","useSelector","getContactsOperation","v4","uuidv4","Form","ContactList","Filter","PhoneBook","contacts","state","filter","alert","isAlert","dispatch","persistedTasks","localStorage","getItem","parseContact","JSON","parse","setItem","stringify","filterContacts","filterArr","contact","name","toLowerCase","includes","length","closeAlert","map"],"mappings":"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":["import React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { alertClose } from \"../../redux/action/alertAction\";\nimport { setContactLocalStorage } from \"../../redux/action/contactAction\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContactsOperation } from \"../../redux/operations/taskOperations\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Form from \"../Form/Form\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport \"./PhoneBook.css\";\n\nconst PhoneBook = () => {\n  const contacts = useSelector((state) => state.contacts);\n  const filter = useSelector((state) => state.filter);\n  const alert = useSelector((state) => state.isAlert);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsOperation());\n    const persistedTasks = localStorage.getItem(\"contacts\");\n    const parseContact = JSON.parse(persistedTasks);\n    if (persistedTasks) {\n      dispatch(setContactLocalStorage(parseContact));\n    }\n  }, [dispatch]);\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  const filterContacts = () => {\n    const filterArr = contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n    if (filterArr.length >= 1) {\n      return filterArr;\n    } else {\n      return contacts;\n    }\n  };\n\n  const closeAlert = () => {\n    dispatch(alertClose());\n  };\n\n  return (\n    <div className=\"phoneBook\">\n      <TransitionGroup className=\"alertBox\" component=\"div\">\n        {alert ? (\n          <CSSTransition\n            classNames=\"alert__Box\"\n            mountOnEnter\n            unmountOnExit\n            timeout={800}\n          >\n            <div className=\"alert__Box\">\n              <h2>{`A contact with the same name already exists!`}</h2>\n              <button onClick={closeAlert} className=\"alertButton\">\n                ok\n              </button>\n            </div>\n          </CSSTransition>\n        ) : null}\n      </TransitionGroup>\n\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={500}\n        classNames=\"logo\"\n        unmountOnExit\n      >\n        <h1 className=\"title\">PhoneBook</h1>\n      </CSSTransition>\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={500}\n        classNames=\"form\"\n        unmountOnExit\n      >\n        <Form />\n      </CSSTransition>\n      <CSSTransition\n        in={filterContacts().length >= 1}\n        timeout={250}\n        classNames=\"contactTitle\"\n        unmountOnExit\n      >\n        <h2 className=\"findTitle\">Find contacts</h2>\n      </CSSTransition>\n      <CSSTransition\n        in={filterContacts().length >= 1}\n        timeout={250}\n        classNames=\"contactTitle\"\n        unmountOnExit\n      >\n        <Filter />\n      </CSSTransition>\n      <TransitionGroup component=\"ul\" className=\"list\">\n        {filterContacts().map((contact) => (\n          <CSSTransition classNames=\"list__item\" timeout={800}>\n            <ContactList {...contact} />\n          </CSSTransition>\n        ))}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default PhoneBook;\n\n// class PhoneBook extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     isError: false,\n//     alert: false,\n//     // number: '',\n//   };\n\n//   componentDidMount() {\n//     const persistedTasks = localStorage.getItem(\"contacts\");\n//     if (persistedTasks) {\n//       this.setState({\n//         contacts: JSON.parse(persistedTasks),\n//       });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = (contact) => {\n//     const arr = this.state.contacts;\n//     const result = arr.some((item) => item.name.includes(contact.name));\n//     result\n//       ? this.setState({ alert: result })\n//       : this.setState((prev) => ({\n//           contacts: [...prev.contacts, { ...contact, id: uuidv4() }],\n//         }));\n//   };\n\n//   deleteContact = (id) => {\n//     this.setState({\n//       contacts: this.state.contacts.filter((contact) => contact.id !== id),\n//     });\n//   };\n\n//   filterContact = () => {\n//     return this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\n//     );\n//   };\n\n//   onHandleChange = (e) => {\n//     const { name, value } = e.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   onSetError = () => {\n//     this.setState((prev) => ({ isError: !prev.isError }));\n//   };\n\n//   closeAlert = () => {\n//     this.setState({ alert: false });\n//   };\n\n//   render() {\n//     const { isError } = this.state;\n//     return (\n//       <>\n//         <TransitionGroup className=\"alertBox\" component=\"div\">\n//           {this.state.alert ? (\n//             <CSSTransition\n//               classNames=\"alert__Box\"\n//               mountOnEnter\n//               unmountOnExit\n//               timeout={800}\n//             >\n//               <div className=\"alert__Box\">\n//                 <h2>{`A contact with the same name already exists!`}</h2>\n//                 <button onClick={this.closeAlert} className=\"alertButton\">\n//                   ok\n//                 </button>\n//               </div>\n//             </CSSTransition>\n//           ) : null}\n//         </TransitionGroup>\n\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={500}\n//           classNames=\"logo\"\n//           unmountOnExit\n//         >\n//           <h1 className=\"title\">PhoneBook</h1>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={1000}\n//           classNames=\"form\"\n//           unmountOnExit\n//         >\n//           <Form\n//             addContact={this.addContact}\n//             isError={this.state.isError}\n//             onSetError={this.onSetError}\n//           />\n//         </CSSTransition>\n//         <CSSTransition\n//           in={this.state.contacts.length > 1}\n//           timeout={250}\n//           classNames=\"contactTitle\"\n//           unmountOnExit\n//         >\n//           <h2 className=\"title\">Find contacts</h2>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={isError}\n//           classNames=\"notFound\"\n//           timeout={500}\n//           unmountOnExit\n//         >\n//           <h2 className={styles.contactListErr}>\n//             Name or Contact is not found!!!\n//           </h2>\n//         </CSSTransition>\n//         <Filter\n//           filter={this.state.filter}\n//           onHandleChange={this.onHandleChange}\n//           contacts={this.state.contacts}\n//         />\n//         {/* <CSSTransition> */}\n//         <ContactList\n//           contacts={\n//             this.state.filter ? this.filterContact() : this.state.contacts\n//           }\n//           deleteContact={this.deleteContact}\n//         />\n//         {/* </CSSTransition> */}\n//       </>\n//     );\n//   }\n// }\n\n// export default PhoneBook;\n"]},"metadata":{},"sourceType":"module"}