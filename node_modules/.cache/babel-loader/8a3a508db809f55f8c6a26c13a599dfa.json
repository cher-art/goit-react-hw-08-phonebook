{"ast":null,"code":"import _objectSpread from\"/Users/timcher/Documents/GitHub/goit-react-hw-08-phonebook/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import React,{useEffect}from\"react\";import{CSSTransition,TransitionGroup}from\"react-transition-group\";import{alertClose}from\"../../redux/action/alertAction\";import{setContactLocalStorage}from\"../../redux/action/contactAction\";import{useDispatch,useSelector}from\"react-redux\";import{getContactsOperation,postContactsOperations}from\"../../redux/operations/taskOperations\";import{v4 as uuidv4}from\"uuid\";import Form from\"../Form/Form\";import ContactList from\"../ContactList/ContactList\";import Filter from\"../Filter/Filter\";import\"./PhoneBook.css\";var PhoneBook=function PhoneBook(){var contacts=useSelector(function(state){return state.contacts;});var filter=useSelector(function(state){return state.filter;});var alert=useSelector(function(state){return state.isAlert;});var token=useSelector(function(state){return state.token;});var dispatch=useDispatch();console.log(contacts);useEffect(function(){dispatch(getContactsOperation(token));},[dispatch]);var filterContacts=function filterContacts(){if(contacts.length>=1){var filterArr=contacts.filter(function(contact){return contact.name.toLowerCase().includes(filter.toLowerCase());});return filterArr;}};var closeAlert=function closeAlert(){dispatch(alertClose());};return/*#__PURE__*/_jsxs(\"div\",{className:\"phoneBook\",children:[/*#__PURE__*/_jsx(TransitionGroup,{className:\"alertBox\",component:\"div\",children:alert?/*#__PURE__*/_jsx(CSSTransition,{classNames:\"alert__Box\",mountOnEnter:true,unmountOnExit:true,timeout:800,children:/*#__PURE__*/_jsxs(\"div\",{className:\"alert__Box\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"A contact with the same name already exists!\"}),/*#__PURE__*/_jsx(\"button\",{onClick:closeAlert,className:\"alertButton\",children:\"ok\"})]})}):null}),/*#__PURE__*/_jsx(CSSTransition,{in:true,appear:true,timeout:500,classNames:\"logo\",unmountOnExit:true,children:/*#__PURE__*/_jsx(\"h1\",{className:\"title\",children:\"PhoneBook\"})}),/*#__PURE__*/_jsx(CSSTransition,{in:true,appear:true,timeout:500,classNames:\"form\",unmountOnExit:true,children:/*#__PURE__*/_jsx(Form,{})}),/*#__PURE__*/_jsx(CSSTransition// in={filterContacts().length >= 1}\n,{timeout:250,classNames:\"contactTitle\",unmountOnExit:true,children:/*#__PURE__*/_jsx(\"h2\",{className:\"findTitle\",children:\"Find contacts\"})}),/*#__PURE__*/_jsx(CSSTransition// in={filterContacts().length >= 1}\n,{timeout:250,classNames:\"contactTitle\",unmountOnExit:true,children:/*#__PURE__*/_jsx(Filter,{})}),/*#__PURE__*/_jsx(TransitionGroup,{component:\"ul\",className:\"list\",children:contacts.length>=1&&contacts.map(function(contact){return/*#__PURE__*/_jsx(CSSTransition,{classNames:\"list__item\",timeout:800,children:/*#__PURE__*/_jsx(ContactList,_objectSpread({},contact))});})})]});};export default PhoneBook;// class PhoneBook extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     isError: false,\n//     alert: false,\n//     // number: '',\n//   };\n//   componentDidMount() {\n//     const persistedTasks = localStorage.getItem(\"contacts\");\n//     if (persistedTasks) {\n//       this.setState({\n//         contacts: JSON.parse(persistedTasks),\n//       });\n//     }\n//   }\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n//   addContact = (contact) => {\n//     const arr = this.state.contacts;\n//     const result = arr.some((item) => item.name.includes(contact.name));\n//     result\n//       ? this.setState({ alert: result })\n//       : this.setState((prev) => ({\n//           contacts: [...prev.contacts, { ...contact, id: uuidv4() }],\n//         }));\n//   };\n//   deleteContact = (id) => {\n//     this.setState({\n//       contacts: this.state.contacts.filter((contact) => contact.id !== id),\n//     });\n//   };\n//   filterContact = () => {\n//     return this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\n//     );\n//   };\n//   onHandleChange = (e) => {\n//     const { name, value } = e.target;\n//     this.setState({ [name]: value });\n//   };\n//   onSetError = () => {\n//     this.setState((prev) => ({ isError: !prev.isError }));\n//   };\n//   closeAlert = () => {\n//     this.setState({ alert: false });\n//   };\n//   render() {\n//     const { isError } = this.state;\n//     return (\n//       <>\n//         <TransitionGroup className=\"alertBox\" component=\"div\">\n//           {this.state.alert ? (\n//             <CSSTransition\n//               classNames=\"alert__Box\"\n//               mountOnEnter\n//               unmountOnExit\n//               timeout={800}\n//             >\n//               <div className=\"alert__Box\">\n//                 <h2>{`A contact with the same name already exists!`}</h2>\n//                 <button onClick={this.closeAlert} className=\"alertButton\">\n//                   ok\n//                 </button>\n//               </div>\n//             </CSSTransition>\n//           ) : null}\n//         </TransitionGroup>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={500}\n//           classNames=\"logo\"\n//           unmountOnExit\n//         >\n//           <h1 className=\"title\">PhoneBook</h1>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={1000}\n//           classNames=\"form\"\n//           unmountOnExit\n//         >\n//           <Form\n//             addContact={this.addContact}\n//             isError={this.state.isError}\n//             onSetError={this.onSetError}\n//           />\n//         </CSSTransition>\n//         <CSSTransition\n//           in={this.state.contacts.length > 1}\n//           timeout={250}\n//           classNames=\"contactTitle\"\n//           unmountOnExit\n//         >\n//           <h2 className=\"title\">Find contacts</h2>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={isError}\n//           classNames=\"notFound\"\n//           timeout={500}\n//           unmountOnExit\n//         >\n//           <h2 className={styles.contactListErr}>\n//             Name or Contact is not found!!!\n//           </h2>\n//         </CSSTransition>\n//         <Filter\n//           filter={this.state.filter}\n//           onHandleChange={this.onHandleChange}\n//           contacts={this.state.contacts}\n//         />\n//         {/* <CSSTransition> */}\n//         <ContactList\n//           contacts={\n//             this.state.filter ? this.filterContact() : this.state.contacts\n//           }\n//           deleteContact={this.deleteContact}\n//         />\n//         {/* </CSSTransition> */}\n//       </>\n//     );\n//   }\n// }\n// export default PhoneBook;","map":{"version":3,"sources":["/Users/timcher/Documents/GitHub/goit-react-hw-08-phonebook/src/Component/PhoneBook/PhoneBook.js"],"names":["React","useEffect","CSSTransition","TransitionGroup","alertClose","setContactLocalStorage","useDispatch","useSelector","getContactsOperation","postContactsOperations","v4","uuidv4","Form","ContactList","Filter","PhoneBook","contacts","state","filter","alert","isAlert","token","dispatch","console","log","filterContacts","length","filterArr","contact","name","toLowerCase","includes","closeAlert","map"],"mappings":"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":["import React, { useEffect } from \"react\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport { alertClose } from \"../../redux/action/alertAction\";\nimport { setContactLocalStorage } from \"../../redux/action/contactAction\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  getContactsOperation,\n  postContactsOperations,\n} from \"../../redux/operations/taskOperations\";\nimport { v4 as uuidv4 } from \"uuid\";\nimport Form from \"../Form/Form\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport \"./PhoneBook.css\";\n\nconst PhoneBook = () => {\n  const contacts = useSelector((state) => state.contacts);\n  const filter = useSelector((state) => state.filter);\n  const alert = useSelector((state) => state.isAlert);\n  const token = useSelector((state) => state.token);\n  const dispatch = useDispatch();\n\n  console.log(contacts);\n\n  useEffect(() => {\n    dispatch(getContactsOperation(token));\n  }, [dispatch]);\n\n  const filterContacts = () => {\n    if (contacts.length >= 1 ) {\n      const filterArr = contacts.filter((contact) =>\n        contact.name.toLowerCase().includes(filter.toLowerCase())\n      );\n      return filterArr;\n    }\n  };\n\n  const closeAlert = () => {\n    dispatch(alertClose());\n  };\n\n  return (\n    <div className=\"phoneBook\">\n      <TransitionGroup className=\"alertBox\" component=\"div\">\n        {alert ? (\n          <CSSTransition\n            classNames=\"alert__Box\"\n            mountOnEnter\n            unmountOnExit\n            timeout={800}\n          >\n            <div className=\"alert__Box\">\n              <h2>{`A contact with the same name already exists!`}</h2>\n              <button onClick={closeAlert} className=\"alertButton\">\n                ok\n              </button>\n            </div>\n          </CSSTransition>\n        ) : null}\n      </TransitionGroup>\n\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={500}\n        classNames=\"logo\"\n        unmountOnExit\n      >\n        <h1 className=\"title\">PhoneBook</h1>\n      </CSSTransition>\n      <CSSTransition\n        in={true}\n        appear={true}\n        timeout={500}\n        classNames=\"form\"\n        unmountOnExit\n      >\n        <Form />\n      </CSSTransition>\n      <CSSTransition\n        // in={filterContacts().length >= 1}\n        timeout={250}\n        classNames=\"contactTitle\"\n        unmountOnExit\n      >\n        <h2 className=\"findTitle\">Find contacts</h2>\n      </CSSTransition>\n      <CSSTransition\n        // in={filterContacts().length >= 1}\n        timeout={250}\n        classNames=\"contactTitle\"\n        unmountOnExit\n      >\n        <Filter />\n      </CSSTransition>\n      <TransitionGroup component=\"ul\" className=\"list\">\n        {contacts.length >= 1 && contacts.map((contact) => (\n              <CSSTransition classNames=\"list__item\" timeout={800}>\n                <ContactList {...contact} />\n              </CSSTransition>\n            ))}\n      </TransitionGroup>\n    </div>\n  );\n};\n\nexport default PhoneBook;\n\n// class PhoneBook extends Component {\n//   state = {\n//     contacts: [],\n//     filter: \"\",\n//     name: \"\",\n//     isError: false,\n//     alert: false,\n//     // number: '',\n//   };\n\n//   componentDidMount() {\n//     const persistedTasks = localStorage.getItem(\"contacts\");\n//     if (persistedTasks) {\n//       this.setState({\n//         contacts: JSON.parse(persistedTasks),\n//       });\n//     }\n//   }\n\n//   componentDidUpdate(prevProps, prevState) {\n//     if (prevState.contacts !== this.state.contacts) {\n//       localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   addContact = (contact) => {\n//     const arr = this.state.contacts;\n//     const result = arr.some((item) => item.name.includes(contact.name));\n//     result\n//       ? this.setState({ alert: result })\n//       : this.setState((prev) => ({\n//           contacts: [...prev.contacts, { ...contact, id: uuidv4() }],\n//         }));\n//   };\n\n//   deleteContact = (id) => {\n//     this.setState({\n//       contacts: this.state.contacts.filter((contact) => contact.id !== id),\n//     });\n//   };\n\n//   filterContact = () => {\n//     return this.state.contacts.filter((contact) =>\n//       contact.name.toLowerCase().includes(this.state.filter.toLowerCase())\n//     );\n//   };\n\n//   onHandleChange = (e) => {\n//     const { name, value } = e.target;\n//     this.setState({ [name]: value });\n//   };\n\n//   onSetError = () => {\n//     this.setState((prev) => ({ isError: !prev.isError }));\n//   };\n\n//   closeAlert = () => {\n//     this.setState({ alert: false });\n//   };\n\n//   render() {\n//     const { isError } = this.state;\n//     return (\n//       <>\n//         <TransitionGroup className=\"alertBox\" component=\"div\">\n//           {this.state.alert ? (\n//             <CSSTransition\n//               classNames=\"alert__Box\"\n//               mountOnEnter\n//               unmountOnExit\n//               timeout={800}\n//             >\n//               <div className=\"alert__Box\">\n//                 <h2>{`A contact with the same name already exists!`}</h2>\n//                 <button onClick={this.closeAlert} className=\"alertButton\">\n//                   ok\n//                 </button>\n//               </div>\n//             </CSSTransition>\n//           ) : null}\n//         </TransitionGroup>\n\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={500}\n//           classNames=\"logo\"\n//           unmountOnExit\n//         >\n//           <h1 className=\"title\">PhoneBook</h1>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={true}\n//           appear={true}\n//           timeout={1000}\n//           classNames=\"form\"\n//           unmountOnExit\n//         >\n//           <Form\n//             addContact={this.addContact}\n//             isError={this.state.isError}\n//             onSetError={this.onSetError}\n//           />\n//         </CSSTransition>\n//         <CSSTransition\n//           in={this.state.contacts.length > 1}\n//           timeout={250}\n//           classNames=\"contactTitle\"\n//           unmountOnExit\n//         >\n//           <h2 className=\"title\">Find contacts</h2>\n//         </CSSTransition>\n//         <CSSTransition\n//           in={isError}\n//           classNames=\"notFound\"\n//           timeout={500}\n//           unmountOnExit\n//         >\n//           <h2 className={styles.contactListErr}>\n//             Name or Contact is not found!!!\n//           </h2>\n//         </CSSTransition>\n//         <Filter\n//           filter={this.state.filter}\n//           onHandleChange={this.onHandleChange}\n//           contacts={this.state.contacts}\n//         />\n//         {/* <CSSTransition> */}\n//         <ContactList\n//           contacts={\n//             this.state.filter ? this.filterContact() : this.state.contacts\n//           }\n//           deleteContact={this.deleteContact}\n//         />\n//         {/* </CSSTransition> */}\n//       </>\n//     );\n//   }\n// }\n\n// export default PhoneBook;\n"]},"metadata":{},"sourceType":"module"}